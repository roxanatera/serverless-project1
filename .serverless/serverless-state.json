{
  "service": {
    "service": "burguer",
    "serviceObject": {
      "name": "burguer"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs22.x",
      "region": "us-east-1",
      "environment": {
        "REGION": "us-east-1"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "PendingOrderQueue",
                  "Arn"
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:sendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "OrdersToSendQueue",
                  "Arn"
                ]
              }
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "NewOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burguer-dev-newOrder"
            }
          },
          "GetOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burguer-dev-getOrder"
            }
          },
          "PreOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burguer-dev-preOrder"
            }
          },
          "SendOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burguer-dev-sendOrder"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "burguer",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/burguer-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/burguer-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "PendingOrderQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "burguer",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "NewOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-aed98ef0-32e2",
                "S3Key": "serverless/burguer/dev/1742557130791-2025-03-21T11:38:50.791Z/burguer.zip"
              },
              "Handler": "handler.newOrder",
              "Runtime": "nodejs22.x",
              "FunctionName": "burguer-dev-newOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NewOrderLogGroup"
            ]
          },
          "GetOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-aed98ef0-32e2",
                "S3Key": "serverless/burguer/dev/1742557130791-2025-03-21T11:38:50.791Z/burguer.zip"
              },
              "Handler": "handler.getOrder",
              "Runtime": "nodejs22.x",
              "FunctionName": "burguer-dev-getOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOrderLogGroup"
            ]
          },
          "PreOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-aed98ef0-32e2",
                "S3Key": "serverless/burguer/dev/1742557130791-2025-03-21T11:38:50.791Z/burguer.zip"
              },
              "Handler": "handler.preOrder",
              "Runtime": "nodejs22.x",
              "FunctionName": "burguer-dev-preOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PreOrderLogGroup"
            ]
          },
          "SendOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-aed98ef0-32e2",
                "S3Key": "serverless/burguer/dev/1742557130791-2025-03-21T11:38:50.791Z/burguer.zip"
              },
              "Handler": "handler.sendOrder",
              "Runtime": "nodejs22.x",
              "FunctionName": "burguer-dev-sendOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "ORDERS_TO_SEND_QUEUE": {
                    "Ref": "OrdersToSendQueue"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendOrderLogGroup"
            ]
          },
          "NewOrderLambdaVersionXgFiHBs1wz4U2xK75ByDmNs5J2XMvUcI6zk2jywZQf0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NewOrderLambdaFunction"
              },
              "CodeSha256": "mJrnFoMUdHw4qxxKWASLODwF37Vx3+PrE1HCenDFLOo="
            }
          },
          "GetOrderLambdaVersionfSHxgjSfw7QeoeM1KDzN96KJu0HjwuI2ssVAujEFRmM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOrderLambdaFunction"
              },
              "CodeSha256": "mJrnFoMUdHw4qxxKWASLODwF37Vx3+PrE1HCenDFLOo="
            }
          },
          "PreOrderLambdaVersionsI1xpCuH2yISNyPV8XrWl5kQLt1txi2lDcB49aYic": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PreOrderLambdaFunction"
              },
              "CodeSha256": "mJrnFoMUdHw4qxxKWASLODwF37Vx3+PrE1HCenDFLOo="
            }
          },
          "SendOrderLambdaVersionJAceTRw7MffN0uMv2VkC4O12CiGP4IscX2QA7TJ4s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendOrderLambdaFunction"
              },
              "CodeSha256": "mJrnFoMUdHw4qxxKWASLODwF37Vx3+PrE1HCenDFLOo="
            }
          },
          "PreOrderEventSourceMappingSQSPendingOrderQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "PendingOrderQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "PreOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-burguer",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "NewOrderLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NewOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationNewOrder": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"NewOrderLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostOrder": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /order",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationNewOrder"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationNewOrder"
          },
          "GetOrderLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOrder": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetOrderLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetOrderOrderidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /order/{orderId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOrder"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOrder"
          },
          "PendingOrderQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "pendingOrderQueue"
            }
          },
          "OrdersToSendQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "ordersToSendQueue"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-aed98ef0-32e2",
            "Export": {
              "Name": "sls-burguer-dev-ServerlessDeploymentBucketName"
            }
          },
          "NewOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NewOrderLambdaVersionXgFiHBs1wz4U2xK75ByDmNs5J2XMvUcI6zk2jywZQf0"
            },
            "Export": {
              "Name": "sls-burguer-dev-NewOrderLambdaFunctionQualifiedArn"
            }
          },
          "GetOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOrderLambdaVersionfSHxgjSfw7QeoeM1KDzN96KJu0HjwuI2ssVAujEFRmM"
            },
            "Export": {
              "Name": "sls-burguer-dev-GetOrderLambdaFunctionQualifiedArn"
            }
          },
          "PreOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PreOrderLambdaVersionsI1xpCuH2yISNyPV8XrWl5kQLt1txi2lDcB49aYic"
            },
            "Export": {
              "Name": "sls-burguer-dev-PreOrderLambdaFunctionQualifiedArn"
            }
          },
          "SendOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendOrderLambdaVersionJAceTRw7MffN0uMv2VkC4O12CiGP4IscX2QA7TJ4s"
            },
            "Export": {
              "Name": "sls-burguer-dev-SendOrderLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-burguer-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-burguer-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "newOrder": {
        "handler": "handler.newOrder",
        "events": [
          {
            "httpApi": {
              "path": "/order",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/order"
          }
        ],
        "name": "burguer-dev-newOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs22.x",
        "vpc": {},
        "versionLogicalId": "NewOrderLambdaVersionXgFiHBs1wz4U2xK75ByDmNs5J2XMvUcI6zk2jywZQf0"
      },
      "getOrder": {
        "handler": "handler.getOrder",
        "events": [
          {
            "httpApi": {
              "path": "/order/{orderId}",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/order/{orderId}"
          }
        ],
        "name": "burguer-dev-getOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs22.x",
        "vpc": {},
        "versionLogicalId": "GetOrderLambdaVersionfSHxgjSfw7QeoeM1KDzN96KJu0HjwuI2ssVAujEFRmM"
      },
      "preOrder": {
        "handler": "handler.preOrder",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][4][\"Resource\"][0]"
              },
              "batchSize": 1
            }
          }
        ],
        "name": "burguer-dev-preOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs22.x",
        "vpc": {},
        "versionLogicalId": "PreOrderLambdaVersionsI1xpCuH2yISNyPV8XrWl5kQLt1txi2lDcB49aYic"
      },
      "sendOrder": {
        "handler": "handler.sendOrder",
        "environment": {
          "ORDERS_TO_SEND_QUEUE": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SendOrderLambdaFunction\"][\"Properties\"][\"Environment\"][\"Variables\"][\"ORDERS_TO_SEND_QUEUE\"]"
          }
        },
        "events": [],
        "name": "burguer-dev-sendOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs22.x",
        "vpc": {},
        "versionLogicalId": "SendOrderLambdaVersionJAceTRw7MffN0uMv2VkC4O12CiGP4IscX2QA7TJ4s"
      }
    },
    "resources": {
      "Resources": {
        "PendingOrderQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "pendingOrderQueue"
          }
        },
        "OrdersToSendQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "ordersToSendQueue"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "burguer",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\Roxana\\Desktop\\serverless-project1\\.serverless\\burguer.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/burguer/dev/1742557130791-2025-03-21T11:38:50.791Z",
    "artifact": "burguer.zip"
  }
}